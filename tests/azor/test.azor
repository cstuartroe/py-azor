all : BOOL(l : [BOOL]) = if head ~ tail <- l
                         then if head then all(tail) else false
                         else true

any : BOOL(l : [BOOL]) = if head ~ tail <- l
                         then if head then true else any(tail)
                         else false

fib : INT(n : INT) = let (l, r) <- fibHelper(n) in l

tup = (2, 50)

fibHelper : (INT, INT)(n : INT) = if n == 0
                                  then (0, 1)
                                  else
                                      let (l, r) <- fibHelper(n - 1)
                                      in (r, l + r)

fib50 : INT = let (a, b) <- tup in fib(b)

range : [INT](n : INT) = if n <= 0
                         then [] of INT
                         else (n - 1) ~ range(n - 1)

int_array_to_str : [INT](l : [INT]) = if first ~ rest <- l
                                      then concat(concat(itos(first), [44, 32]), int_array_to_str(rest))
                                      else [] of INT

concat : [INT](l1 : [INT], l2 : [INT]) = if first ~ rest <- l1
                                         then first ~ concat(rest, l2)
                                         else l2

zip : [(INT, INT)](l1 : [INT], l2 : [INT]) = if first1 ~ rest1 <- l1
                                             then
                                                 if first2 ~ rest2 <- l2
                                                 then (first1, first2) ~ zip(rest1, rest2)
                                                 else [] of (INT, INT)
                                             else [] of (INT, INT)

square(n : INT) = n ** 2

map : [INT](f : INT(INT), l : [INT]) = if head ~ tail <- l
                                       then f(head) ~ map(f, tail)
                                       else [] of INT

reverseHelper : [INT](l1 : [INT], l2 : [INT]) = if head ~ tail <- l1
                                              then reverseHelper(tail, head ~ l2)
                                              else l2

reverse : [INT](l : [INT]) = reverseHelper(l, [] of INT)

asciiDigitOffset = 48

itosHelper : [INT](n : INT) = let lastDigit <- n % 10
                              in
                                  if n < 10
                                  then [lastDigit + asciiDigitOffset]
                                  else (lastDigit + asciiDigitOffset) ~ itosHelper(n / 10)

itos : [INT](n : INT) = reverse(itosHelper(n))

main = let _ <- print(int_array_to_str(map(square, range(10)))) in 0
