all:BOOL(l:[BOOL]) = if (l -> (head ~ tail))
                     then (if head then all(tail) else false)
                     else true

any:BOOL(l:[BOOL]) = if (l -> (head ~ tail))
                     then (if head then true else any(tail))
                     else false

fib:INT(n:INT) = let (fibHelper(n) -> (l, r)) in l

tup:(INT, INT) = (2, 50)

fibHelper:(INT, INT) (n:INT) = if (n == 0)
                               then (0, 1)
                               else let (fibHelper((n - 1)) -> (l, r))
                                    in (printi(r), (l + r))

fib50:INT = let (tup -> (a, b)) in fib(b)

range:[INT](n:INT) = if (n <= 0)
                     then []
                     else (n - 1) ~ range((n - 1))

print_list:CONTEXT(l:[[INT]], c:CONTEXT) = if (l -> (first ~ rest))
                                            then let c2 = print(first) in print_list(rest, c2)
                                            else c

zip:[(INT, INT)](l1:[INT], l2:[INT]) = if (l1 -> (first1 ~ rest1))
                                       then ( if (l2 -> first2 ~ rest2)
                                              then (first1, first2) ~ zip(rest1, rest2)
                                              else [] )
                                       else [] )

square:INT(n:INT) = (n * n)

map:[INT](f:INT(INT), l:[INT]) = if (l -> head ~ tail)
                                 then (f(head) ~ map(f, tail))
                                 else []

let (A <: ANY) in join:[A](l1:[A], l2:[A]) = if (l1 -> (head ~ tail)) then (head ~ (tail join l2)) else l2

reverseHelper:[A](l1:[A], l2:[A]) = if (l1 -> (head ~ tail)) then reverseHelper(tail, (head ~ l2)) else l2

reverse:[A](l:[A]) = reverseHelper(l, [])

itosHelper:[CHAR](n:INT) = let ((n % 10) -> lastDigit) in (if (n < 10) then [lastDigit] else itos(n / 10))

itos:[CHAR](n:INT) = reverse(itosHelper(n))

main:CONTEXT(c:CONTEXT) = if (print_list(map(square, range(10))) -> head ~ tail) then true else false
